!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var o=t&&t.prototype instanceof v?t:v,a=Object.create(o.prototype),i=new L(r||[]);return a._invoke=function(e,t,n){var r=f;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return _()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=C(i,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===f)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=u(e,t,n);if("normal"===s.type){if(r=n.done?g:d,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=g,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var f="suspendedStart",d="suspendedYield",p="executing",g="completed",h={};function v(){}function m(){}function y(){}var w={};s(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(N([])));k&&k!==n&&r.call(k,a)&&(w=k);var S=y.prototype=v.prototype=Object.create(w);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var s=u(e[o],e,a);if("throw"!==s.type){var l=s.arg,f=l.value;return f&&"object"==typeof f&&r.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(f).then((function(e){l.value=e,i(l)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function E(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function A(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function L(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(E,this),this.reset(!0)}function N(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return m.prototype=y,s(S,"constructor",y),s(y,"constructor",m),m.displayName=s(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===m||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},x(I.prototype),s(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(l(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(S),s(S,c,"Generator"),s(S,a,(function(){return this})),s(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=N,L.prototype={constructor:L,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),A(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:N(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function r(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}function o(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t,n,r,o,a,i){try{var c=e[a](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function i(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function c(e){a(i,r,o,c,s,"next",e)}function s(e){a(i,r,o,c,s,"throw",e)}c(void 0)}))}}var c=n(757),s=n.n(c);function l(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var u="https://ndvivense.glov.ai/nd-styles.css?id=".concat((new Date).toISOString().substring(0,13).replace("T","").replaceAll("-","")),f="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",d="(max-width: 440px)",p=90,g="__nextday_session_id",h="ND_PageViews",v="ND_SessionTimestamp",m="ND_PopupDisplayFlag",y="ND_CABasketPrice",w="ND_Debug";function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t,n){return t&&k(e.prototype,t),n&&k(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK",n=arguments.length>1&&void 0!==arguments[1]&&arguments[1];b(this,e),this.origin=t,this.DEBUG=n}return S(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}}]),e}(),I=x;function C(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return E(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?E(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function E(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var A=new I("Nextday Utils");"randomUUID"in crypto||U();var L=function(){document.documentElement.classList.remove("nextDay-hide")},N=function(){var e=i(s().mark((function e(){var t;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return A.log("Fetching treatments"),e.next=3,fetch("https://ndvivense.glov.ai/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),_=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},O=function(){var e=i(s().mark((function e(t){var n,r,o,a,i;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(t){e.next=2;break}return e.abrupt("return",-1);case 2:return n=(new TextEncoder).encode(t),e.next=5,crypto.subtle.digest("SHA-1",n);case 5:return r=e.sent,o=Array.from(new Uint8Array(r)),a=o.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),i=parseInt(a,16),e.abrupt("return",i%100);case 10:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),T=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},j=function(e,t){A.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=l(a[o],2),c=i[0],s=i[1];r.style[c]=s}},R=function(){if(!document.documentElement.classList.contains("nextDay-hide")){var e=document.createElement("style");e.textContent=".nextDay-hide { opacity: 0 !important }",document.documentElement.appendChild(e),document.documentElement.classList.add("nextDay-hide")}},D=function(){var e=i(s().mark((function e(){var t;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=u,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),q=function(e,t){var n,r=JSON.parse(JSON.stringify(e)),o=C(r);try{for(o.s();!(n=o.n()).done;){var a=n.value,i=a.subVariants;if(i){var c,s=C(i);try{for(s.s();!(c=s.n()).done;){var l=c.value;if(l.id===t){for(var u in l)"id"!==u&&(a[u]=l[u]);return r}}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){o.e(e)}finally{o.f()}return r},P=function(e,t,n){if("notExist"===t)return e?(A.log("conditionChecker: -not satisfied- target does exist"),!1):(A.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return A.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(A.log("conditionChecker: -satisfied- target does exist"),!0):(A.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(A.log("conditionChecker: -satisfied- target contains value"),!0):(A.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(A.log("conditionChecker: -not satisfied- target contains value"),!1):(A.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(A.log("conditionChecker: -satisfied- target equals value"),!0):(A.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(A.log("conditionChecker: -satisfied- target does not equal value"),!0):(A.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(A.log("conditionChecker: -satisfied- target is greater than value"),!0):(A.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(A.log("conditionChecker: -satisfied- target is less than value"),!0):(A.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(A.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(A.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(A.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(A.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=l(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(A.log("conditionChecker: -satisfied- target is between min and max"),!0):(A.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return A.log("conditionChecker: condition is not defined ",t),!1}},U=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},M=function t(n,r){if(n===r)return!0;if("object"!==e(n)||"object"!==e(r)||null==n||null==r)return!1;var o=Object.keys(n),a=Object.keys(r);if(o.length!==a.length)return!1;var i=!0;return o.forEach((function(e){a.includes(e)||(i=!1),"function"!=typeof n[e]&&"function"!=typeof r[e]||n[e].toString()!==r[e].toString()&&(i=!1),t(n[e],r[e])||(i=!1)})),i};function J(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return F(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?F(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function F(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function B(){return B=i(s().mark((function e(t){var n,r,o,a,i,c,l,u=arguments;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:u.length>1&&void 0!==u[1]&&u[1],n=new I("Nextday Apply Treatments"),r=m,o=function(e){n.log("Applying treatment: ",JSON.stringify(e));var t=e.operator,o=e.type,a=e.applyEvent,s=e.contentSelector,u=e.selector,f=e.selectorFallback,p=e.mdCondition,g=e.move_selector_1,h=e.move_selector_2,v=e.replaceFn,m=e.value,y=$(u);if(!p||window.matchMedia(p).matches)if(g&&!h||h&&!g)n.log("Both move selectors are required");else{if(g&&h){if(!$(g).length)return void n.log("Move selector 1 not found: ",g);if(!$(h).length)return void n.log("Move selector 2 not found: ",h)}else{if(!u)return void n.log("Selector not specified");if(!y.length&&(n.log("Selector not found: ",u),n.log("Trying fallback selector: ",f),f&&(y=$(f)),!y.length))return void n.log("Fallback selector not found")}if(v&&m.includes("{{REPLACE}}")){n.log("Executing replace function: ",v);var w=Function(v);m=m.replace("{{REPLACE}}",w())}if("remove"===t)y&&(n.log("Removing: ",u),y.remove()),n.log("Cannot found element with selector: ",u);else if("insert"===t)switch(o){case"before":n.log("Inserting before: ",m),String(m).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),y.before(m);break;case"after":n.log("Inserting after: ",m),y.after(m);break;case"popup":if(0!==parseInt(sessionStorage.getItem(r))){n.log("Popup already displayed in session");break}if(n.log("Creating Popup: ",m),c(m,s),a){var b,k=window.matchMedia(d).matches,S=J(a);try{for(S.s();!(b=S.n()).done;)switch(b.value){case"exitIntent":n.log("Adding exit intent listener"),k?T(i):document.documentElement.addEventListener("mouseleave",i,{once:!0});break;case"copyIntent":n.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",i,{once:!0})}}catch(e){S.e(e)}finally{S.f()}}else setTimeout((function(){i()}),timeout)}else if("edit"===t)switch(o){case"text":n.log("Editing text: ",m),document.querySelector(u).textContent=m;break;case"styleApplicator":n.log("Applying style: ",m);var x=document.querySelectorAll(u),I=JSON.parse(m);n.log("Style Changes Map: ",I),j(x,I);break;case"addClass":n.log("addding class to ".concat(y," named ").concat(m)),y.addClass(m);break;case"removeClass":n.log("remove class from ".concat(y," named ").concat(m)),y.removeClass(m)}else if("setattribute"===t)switch(n.log("Setting attribute: ",attribute,m),attribute){case"src":y.css("content","url(".concat(m.trim(),")"));break;case"style":var C=m.split(":")[0].trim(),E=m.split(":")[1].trim();y.css(C,E,"!important")}else if("replace"===t)n.log("Replacing: ",m),y.replaceAll(m);else if("swap"===t){n.log("Swapping: ",g,h);var A=document.querySelector(g),L=document.querySelector(h);l(A,L)}else if("injectscript"===t)n.log("Injecting script: ",m),y.append("<script>".concat(m,"<\/script>"));else if("move"===t){n.log("Moving ".concat(g," to ").concat(h));var N=document.querySelector(g),_=document.querySelector(h);N.remove(),_.prepend(N)}else"noop"===t?n.log("Noop Operator: No operation is applied on target "):n.log("No such operator exists yet",t)}else n.log("Media condition mismatch: ",p)},a=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},i=function e(){sessionStorage.setItem(r,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",a,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",a,!0)}),15e3)},c=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",a,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var i=document.createElement("template");i.innerHTML=e.trim();var c=i.content.firstChild;c.appendChild(r),n.appendChild(c),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},l=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},function e(t){if(window.jQuery){var r,a=J(t);try{for(a.s();!(r=a.n()).done;){var i=r.value;try{o(i)}catch(e){n.log("Couldn't apply treatment ".concat(i.id," with error ").concat(e.message));continue}}}catch(e){a.e(e)}finally{a.f()}}else setTimeout((function(){e(t)}),10)}(t);case 11:case"end":return e.stop()}}),e)}))),B.apply(this,arguments)}var V=function(e){return B.apply(this,arguments)},G=function(){function e(t,n){b(this,e),this.logger=new I("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentIds=JSON.parse(JSON.stringify(t)),this.eligibleNotAppliedTreatments=JSON.parse(JSON.stringify(n)),this.latestChanges=null,this.eligibleNotAppliedChanges=null,this.sessionId=sessionStorage.getItem(g),this.viewId=crypto.randomUUID(),this.headers={type:"application/json"},this.logger.log("Initializing with session id: "+this.sessionId),this.initializeExitEventListener(),this.debugMode=window.localStorage.getItem(w)?"on":"off"}var t,n,r;return S(e,[{key:"sendLogs",value:(r=i(s().mark((function e(){var t;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(this.logger.log("Sending logs"),t=!1,setTimeout((function(){t=!0}),1e3);!t;)t=navigator.sendBeacon(f,this.packageLogData());case 4:case"end":return e.stop()}}),e,this)}))),function(){return r.apply(this,arguments)})},{key:"updateLatestChanges",value:function(e,t){var n=this.appliedTreatmentIds,r=this.eligibleNotAppliedTreatments,o=this.logger;o.log("Updating latest changes");var a=this.latestChanges||n;M(a,e)||(o.log("Changes detected"),o.log("Changes: ",e),this.latestChanges=e),a=this.eligibleNotAppliedChanges||r,M(a,t)||(o.log("Changes detected"),o.log("Changes: ",e),this.eligibleNotAppliedChanges=t)}},{key:"packageLogData",value:function(){var e=!(arguments.length>0&&void 0!==arguments[0])||arguments[0],t=this.appliedTreatmentIds,n=this.eligibleNotAppliedTreatments,r=this.debugMode,o=this.headers,a=this.sessionId,i=this.viewId,c=Object.keys(t).length?"Treatments applied":"No treatments applied",s=new URL(window.location.href),l={n:"nextday-session_id-".concat(a),u:s.href,d:s.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer?JSON.parse(JSON.stringify(window.dataLayer)):[],t:Date.now(),v:"0.0.22",a:t,e:n,vId:i,sr:p,m:c,dbm:r,isOn:e};return new Blob([JSON.stringify(l)],o)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.eligibleNotAppliedChanges,n=this.latestChanges,r=this.viewId;if(!n)return!1;var o={t:Date.now(),a:n,e:t,vId:r};return new Blob([JSON.stringify(o)],e)}},{key:"initializeExitEventListener",value:function(){var e=this,t=this.logger;t.log("Initializing exit event listener"),window.addEventListener("pagehide",(function(){t.log("In pagehide event");var n=e.packageUpdateLogData();if(n){for(var r=!1;!r;)r=navigator.sendBeacon(f,n);t.log("Logs queued successfully")}else t.log("No changes to log")}),{capture:!0})}}],[{key:"sendEmptyLog",value:(n=i(s().mark((function e(t){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(console.log("Nextday Monitor: Sending empty logs"),n=!1,setTimeout((function(){n=!0}),1e3);!n;)n=navigator.sendBeacon(f,this.packageEmptyLogData(t));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"sendScriptOffLog",value:(t=i(s().mark((function e(t){var n;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(console.log("Nextday Monitor: Sending script off logs"),n=!1,setTimeout((function(){n=!0}),1e3);!n;)n=navigator.sendBeacon(f,this.packageEmptyLogData(t,!1));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"packageEmptyLogData",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],n=new URL(window.location.href),r=window.localStorage.getItem(w)?"on":"off",o=sessionStorage.getItem(g),a={type:"application/json"},i={n:"nextday-session_id-".concat(o),u:n.href,d:n.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer?JSON.parse(JSON.stringify(window.dataLayer)):[],t:Date.now(),v:"0.0.22",a:{},e:{},vId:null,sr:p,m:e,dbm:r,isOn:t};return new Blob([JSON.stringify(i)],a)}}]),e}(),z=G,Y=new I("Nextday Treatment Repository"),H=function(){function e(t){b(this,e);var n=t.cookiePct,r=t.treatments;this.treatments=r,this.cookiePct=n}var t;return S(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return Y.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw Y.info("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=i(s().mark((function e(){var t,n,r,o,a,i;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Y.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(localStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return Y.log("Treatments not found in local storage"),e.next=9,N();case 9:return r=e.sent,a={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return Y.log("Treatments are expired"),e.next=19,N();case 19:return r=e.sent,i={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 23:return Y.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),K=H,W=new I("Nextday Counter Checker"),Q=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return W.log("No such type",t),null}}catch(t){return W.log("Could not get counter ".concat(e),t),null}};function X(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Z=new I("Nextday DataLayer Checker"),ee=function(e){Z.log("Searching dataLayer for key",e);var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return X(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?X(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(Object.keys(r).includes(e))return Z.log("Found key ".concat(e," with value ").concat(r[e])),r[e]}}catch(e){n.e(e)}finally{n.f()}return Z.log("Key ".concat(e," not found in dataLayer")),null},te=new I("Nextday Element Checker"),ne=new I("Nextday Function Checker"),re=new I("Nextday Session Checker"),oe=new I("Nextday Url Checker");function ae(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ie(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ie(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ie(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ce=new I("Nextday Rule Engine"),se=function(){function e(t){b(this,e);var n=t.baseRuleSet,r=t.subVariantRuleSet,o=t.callback,a=void 0===o?null:o;this.baseRuleSet=n,this.subVariantRuleSet=r,this.callback=a}return S(e,[{key:"checkRules",value:function(){var e,t=ae(this.baseRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(!this.checkRule(n))return!1}}catch(e){t.e(e)}finally{t.f()}return!0}},{key:"checkSubVariantRules",value:function(){var e,t=ae(this.subVariantRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(this.checkRule(n))return n.subVariantId}}catch(e){t.e(e)}finally{t.f()}return!1}},{key:"checkRule",value:function(e){var t=e.chain,n=e.chain_condition,r=e.type,o=null;switch(r){case"session":o=function(e){re.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;return"duration"===t?function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(sessionStorage.getItem(v)))}catch(e){return re.log("Could not get session timestamp",e),Date.now()}}())/1e3;return P(n,e,parseInt(t))}(n,r):null}(e);break;case"counter":o=function(e){W.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return function(e,t){var n=parseInt(Q(h,"session"));return W.log("Page views counter value: ",n),null===n?(W.log("Pageviews counter not found in session storage"),!1):P(n,e,parseInt(t))}(n,r);case"CABasketPrice":return function(e,t){var n=parseInt(Q(y,"local"));return W.log("Coupon applicable basket price counter value: ",n),null===n?(W.log("Coupon applicable basket price counter not found in local storage"),!1):P(n,e,parseInt(t))}(n,r);default:return W.log("No such operator",t),!1}}(e);break;case"element":o=function(e){te.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,s=void 0===c?null:c,l=a;if(l&&!document.querySelector(l)&&(l=s||l),null===n)return P(document.querySelector(l),r,o);if(l&&!document.querySelector(l))return te.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return te.log("Selector not found on page"),!1;switch(l?t=document.querySelector(l):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var u;u=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(l).textContent.replace("TL","").replace(".",""));var f=parseInt(u);return P(f,r,o);case"classList":return P(Array.from(t.classList),r,o);default:return te.log("Operator not defined"),!1}}(e);break;case"dataLayer":o=function(e){Z.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=ee(t);return P(o,n,r)}(e);break;case"url":o=function(e){oe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return oe.log("Checking path ".concat(a," matches rule path ").concat(r)),P(a,n,r)}}(e);break;case"function":o=function(e){ne.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if(!t)return ne.log("Rule function not defined"),!1;var o=Function(t)();return P(o,n,r)}(e);break;default:ce.log("No such rule type: ".concat(r))}if(t)switch(n){case"and":o=o&&this.checkRule(t);break;case"or":o=o||this.checkRule(t);break;case"xor":o=o!=this.checkRule(t);break;default:ce.log("No such chain condition")}return o}}]),e}();function le(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ue(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}i(s().mark((function t(){var n;return s().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return t.prev=0,t.delegateYield(s().mark((function e(){var t,n,r,a,c,l,u,f,b,k,S,x,C,E,A,N,T,j,P,U,M,J,F,B,$,G,Y,H;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new I).info("Nextday initiated"),(n=window.location.search).includes("nd_debug=1")?window.localStorage.setItem(w,1):n.includes("nd_debug=0")&&window.localStorage.removeItem(w),r=_(document.cookie,"_ga"),t.log("Found cookie identifier: ",r),e.next=8,O(r);case 8:if(a=e.sent,window.localStorage.getItem(w)){e.next=15;break}if(!(a<p)){e.next=13;break}throw z.sendScriptOffLog("Control group: no treatments applied"),new Error("Control group: no treatments applied");case 13:e.next=16;break;case 15:console.info("Debug mode on: all applicable treatments will be applied");case 16:return R(),D(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,W=h,Q=m,X=g,Z=v,ee=sessionStorage.getItem(W),te=sessionStorage.getItem(Q),ne=sessionStorage.getItem(X),re=sessionStorage.getItem(Z),ee?sessionStorage.setItem(W,parseInt(ee)+1):sessionStorage.setItem(W,1),null===te&&sessionStorage.setItem(Q,0),ne||sessionStorage.setItem(X,crypto.randomUUID()),re||sessionStorage.setItem(Z,Date.now()),setTimeout((function(){L()}),2e3),c=K.getTreatments(),l=window.matchMedia(d).matches,u={subtree:!0,childList:!0},f=function(){var e=i(s().mark((function e(n,r,o){var a,i,c,u,f,d,p;return s().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(a=n.actions,i=n.baseRuleSet,c=n.device,u=n.subVariantRuleSet,"mobile"!==c||l){e.next=4;break}return t.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 4:if("desktop"!==c||!l){e.next=7;break}return t.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 7:if(f=new se({baseRuleSet:i,subVariantRuleSet:u}),t.log("Starting base rule set check for treatment: "+n.id),i&&!f.checkRules()){e.next=21;break}if(u){e.next=14;break}return V(a),r[n.id]={subVariantId:null,actions:a},e.abrupt("return");case 14:return t.log("Starting sub variant rule set check for treatment: "+n.id),d=f.checkSubVariantRules(),p=a,d?(t.log("Applying sub variant with id: ",d),p=q(a,d)):t.log("Applying treatment with default values"),V(p),r[n.id]={subVariantId:d,actions:p},e.abrupt("return");case 21:t.log("Rule check failed for treatment: ",n.id);case 22:case"end":return e.stop()}}),e)})));return function(t,n,r){return e.apply(this,arguments)}}(),(b=function(){var e=y;if(window.location.href.includes("/siparis-listesi.html")){var n=Array.from(document.querySelectorAll(".price"));if(n.push.apply(n,o(Array.from(document.querySelectorAll(".new-price")))),!n.length)return t.log("Price elements not found"),void window.localStorage.setItem(e,0);t.log("Price elements: ",n);var r=n.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);t.log("Coupon applicable total price: ",r),r>=0&&window.localStorage.setItem(e,r)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)})(),window.location.href.includes("/siparis-listesi.html")&&(k=new MutationObserver((function(){t.log("Mutation observed, calling collectCABasketPrice"),b()})),(S=document.querySelector("#checkoutForm"))&&k.observe(S,u)),e.next=29,c;case 29:if(x=e.sent,t.log("Found treatments: ",x),t.log("Found cookie percentage: ",a),t.log("Split_ratio: ",p),t.log("cookiePct < SPLIT_RATIO",a<p),t.info("Control group ratio: ".concat(p,"%")),C=new K({treatments:x,cookiePct:a}),(E=C.getMatchedTreatments()).length){e.next=42;break}return t.log("No treatments matched, returning without further action"),L(),z.sendEmptyLog("No treatments matched"),e.abrupt("return",{v:void 0});case 42:A={},N={},T={},j=le(E),e.prev=46,j.s();case 48:if((P=j.n()).done){e.next=62;break}return U=P.value,e.prev=50,M=U.id,J=U.reapply_event,(F=void 0===J?null:J)&&(t.log("Reapply event '".concat(F,"' found for treatment: ").concat(M)),B=T[F]?T[F]:[],T[F]=[].concat(o(B),[M])),e.next=55,f(U,A,N);case 55:e.next=60;break;case 57:e.prev=57,e.t0=e.catch(50),t.log("Error executing rules",e.t0);case 60:e.next=48;break;case 62:e.next=67;break;case 64:e.prev=64,e.t1=e.catch(46),j.e(e.t1);case 67:return e.prev=67,j.f(),e.finish(67);case 70:for(t.info("Treatments applied"),L(),t.log("Applied treatments: ",A),($=new z(A,N)).sendLogs(),setInterval((function(){$.updateLatestChanges(A,N)}),1e3),G=function(){var e=H[Y],n=T[e],r=E.filter((function(e){return n.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,n=le(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from infinite_scroll")),f(o,A,N)}}catch(e){n.e(e)}finally{n.f()}}));o.observe(document.body);break;case"timeout":setTimeout((function(){var e,n=le(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from timeout")),f(o,A,N)}}catch(e){n.e(e)}finally{n.f()}}),500);break;case"element_change":var a,i=le(r);try{var c=function(){var e,n=a.value,r=le(Array.isArray(n.reapply_selector)?n.reapply_selector:[n.reapply_selector]);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){t.log("Retrying treatment ".concat(n.id," from element_change")),f(n,A,N)})).observe(i,u)}}catch(e){r.e(e)}finally{r.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;case"on_scroll":window.onscroll=function(){var e,n=le(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from on_scroll")),f(o,A,N)}}catch(e){n.e(e)}finally{n.f()}};break;default:t.log("Reapply event not found: ",e)}},Y=0,H=Object.keys(T);Y<H.length;Y++)G();case 78:case"end":return e.stop()}var W,Q,X,Z,ee,te,ne,re}),e,null,[[46,64,67,70],[50,57]])}))(),"t0",2);case 2:if("object"!==e(n=t.t0)){t.next=5;break}return t.abrupt("return",n.v);case 5:t.next=12;break;case 7:t.prev=7,t.t1=t.catch(0),L(),console.warn("Nextday: ",t.t1.message),"Control group: no treatments applied"!==t.t1.message&&z.sendEmptyLog("Error when applying treatments: ".concat(t.t1.message));case 12:case"end":return t.stop()}}),t,null,[[0,7]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
