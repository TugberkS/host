!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function l(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{l({},"")}catch(e){l=function(e,t,n){return e[t]=n}}function u(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,a=Object.create(o.prototype),i=new E(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return N()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=C(i,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var l=s(e,t,n);if("normal"===l.type){if(r=n.done?g:f,l.arg===h)continue;return{value:l.arg,done:n.done}}"throw"===l.type&&(r=g,n.method="throw",n.arg=l.arg)}}}(e,n,i),a}function s(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=u;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",h={};function m(){}function v(){}function y(){}var w={};l(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(L([])));k&&k!==n&&r.call(k,a)&&(w=k);var S=y.prototype=m.prototype=Object.create(w);function x(e){["next","throw","return"].forEach((function(t){l(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var l=s(e[o],e,a);if("throw"!==l.type){var u=l.arg,d=u.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){u.value=e,i(u)}),(function(e){return n("throw",e,i,c)}))}c(l.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function C(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,C(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=s(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function A(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function _(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function E(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(A,this),this.reset(!0)}function L(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:N}}function N(){return{value:t,done:!0}}return v.prototype=y,l(S,"constructor",y),l(y,"constructor",v),v.displayName=l(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,l(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},x(I.prototype),l(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(u(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(S),l(S,c,"Generator"),l(S,a,(function(){return this})),l(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=L,E.prototype={constructor:E,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(_),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var l=r.call(i,"catchLoc"),u=r.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),_(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;_(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:L(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function r(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}function o(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e,t,n,r,o,a,i){try{var c=e[a](i),l=c.value}catch(e){return void n(e)}c.done?t(l):Promise.resolve(l).then(r,o)}function i(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function c(e){a(i,r,o,c,l,"next",e)}function l(e){a(i,r,o,c,l,"throw",e)}c(void 0)}))}}var c=n(757),l=n.n(c);function u(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var s=window.location.href.includes("staging.vivense")?"https://ndvivense.glov.ai/treatments_staging.json":"https://ndvivense.glov.ai/treatments.json",d="https://ndvivense.glov.ai/nd-styles.css?id=".concat((new Date).toISOString().substring(0,13).replace("T","").replaceAll("-","")),f="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",p="(max-width: 440px)",g="__nextday_session_id",h="ND_PageViews",m="ND_SessionTimestamp",v="ND_PopupDisplayFlag",y="ND_Treatments",w="ND_CABasketPrice",b="ND_Debug";function k(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function x(e,t,n){return t&&S(e.prototype,t),n&&S(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var I=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";k(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(b)}return x(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}}]),e}(),C=I;function A(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return _(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?_(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function _(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var E=new C("Nextday Utils");"randomUUID"in crypto||D();var L=function(){document.documentElement.classList.remove("nextDay-hide")},N=function(){var e=i(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return E.log("Fetching treatments"),e.next=3,fetch(s);case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),T=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},P=function(){var e=i(l().mark((function e(t){var n,r,o,a,i,c,u=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=u.length>1&&void 0!==u[1]?u[1]:8,t){e.next=3;break}return e.abrupt("return",-1);case 3:return r=(new TextEncoder).encode(t),e.next=6,crypto.subtle.digest("SHA-1",r);case 6:return o=e.sent,a=Array.from(new Uint8Array(o)),i=a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),c=parseInt(i.substring(0,n),16),e.abrupt("return",c%100);case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),O=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},j=function(e,t){E.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],o=0,a=Object.entries(t);o<a.length;o++){var i=u(a[o],2),c=i[0],l=i[1];r.style[c]=l}},R=function(){var e=i(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=d,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),V=function(e,t){var n,r=JSON.parse(JSON.stringify(e)),o=A(r);try{for(o.s();!(n=o.n()).done;){var a=n.value,i=a.subVariants;if(i){var c,l=A(i);try{for(l.s();!(c=l.n()).done;){var u=c.value;if(u.id===t){for(var s in u)"id"!==s&&(a[s]=u[s]);return r}}}catch(e){l.e(e)}finally{l.f()}}}}catch(e){o.e(e)}finally{o.f()}return r},q=function(e,t,n){if("notExist"===t)return e?(E.log("conditionChecker: -not satisfied- target does exist"),!1):(E.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return E.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(E.log("conditionChecker: -satisfied- target does exist"),!0):(E.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(E.log("conditionChecker: -satisfied- target contains value"),!0):(E.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(E.log("conditionChecker: -not satisfied- target contains value"),!1):(E.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(E.log("conditionChecker: -satisfied- target equals value"),!0):(E.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(E.log("conditionChecker: -satisfied- target does not equal value"),!0):(E.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(E.log("conditionChecker: -satisfied- target is greater than value"),!0):(E.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(E.log("conditionChecker: -satisfied- target is less than value"),!0):(E.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(E.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(E.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(E.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(E.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=u(n.split(","),2),o=r[0],a=r[1];return o=parseInt(o),a=parseInt(a),e>=o&&e<=a?(E.log("conditionChecker: -satisfied- target is between min and max"),!0):(E.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return E.log("conditionChecker: condition is not defined ",t),!1}},D=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},U=function t(n,r){if(n===r)return!0;if("object"!==e(n)||"object"!==e(r)||null==n||null==r)return!1;var o=Object.keys(n),a=Object.keys(r);if(o.length!==a.length)return!1;var i=!0;return o.forEach((function(e){a.includes(e)||(i=!1),"function"!=typeof n[e]&&"function"!=typeof r[e]||n[e].toString()!==r[e].toString()&&(i=!1),t(n[e],r[e])||(i=!1)})),i};function F(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return M(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?M(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function M(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function B(){return B=i(l().mark((function e(t){var n,r,o,a,i,c,u,s=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:s.length>1&&void 0!==s[1]&&s[1],n=new C("Nextday Apply Treatments"),r=v,o=function(e){n.log("Applying treatment: ",JSON.stringify(e));var t=e.operator,o=e.type,a=e.applyEvent,l=e.contentSelector,s=e.selector,d=e.selectorFallback,f=e.mdCondition,g=e.move_selector_1,h=e.move_selector_2,m=e.replaceFn,v=e.value,y=$(s);if(!f||window.matchMedia(f).matches)if(g&&!h||h&&!g)n.log("Both move selectors are required");else{if(g&&h){if(!$(g).length)return void n.log("Move selector 1 not found: ",g);if(!$(h).length)return void n.log("Move selector 2 not found: ",h)}else{if(!s)return void n.log("Selector not specified");if(!y.length&&(n.log("Selector not found: ",s),n.log("Trying fallback selector: ",d),d&&(y=$(d)),!y.length))return void n.log("Fallback selector not found")}if(m&&v.includes("{{REPLACE}}")){n.log("Executing replace function: ",m);var w=Function(m);v=v.replace("{{REPLACE}}",w())}if("remove"===t)y&&(n.log("Removing: ",s),y.remove()),n.log("Cannot found element with selector: ",s);else if("insert"===t)switch(o){case"before":n.log("Inserting before: ",v),String(v).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),y.before(v);break;case"after":n.log("Inserting after: ",v),y.after(v);break;case"popup":if(0!==parseInt(sessionStorage.getItem(r))){n.log("Popup already displayed in session");break}if(n.log("Creating Popup: ",v),c(v,l),a){var b,k=window.matchMedia(p).matches,S=F(a);try{for(S.s();!(b=S.n()).done;)switch(b.value){case"exitIntent":n.log("Adding exit intent listener"),k?O(i):document.documentElement.addEventListener("mouseleave",i,{once:!0});break;case"copyIntent":n.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",i,{once:!0})}}catch(e){S.e(e)}finally{S.f()}}else setTimeout((function(){i()}),timeout)}else if("edit"===t)switch(o){case"text":n.log("Editing text: ",v),y.text(v);break;case"styleApplicator":n.log("Applying style: ",v);var x=document.querySelectorAll(s),I=JSON.parse(v);n.log("Style Changes Map: ",I),j(x,I);break;case"addClass":n.log("addding class to ".concat(y," named ").concat(v)),y.addClass(v);break;case"removeClass":n.log("remove class from ".concat(y," named ").concat(v)),y.removeClass(v)}else if("setattribute"===t)switch(n.log("Setting attribute: ",attribute,v),attribute){case"src":y.css("content","url(".concat(v.trim(),")"));break;case"style":var C=v.split(":")[0].trim(),A=v.split(":")[1].trim();y.css(C,A,"!important")}else if("replace"===t)n.log("Replacing: ",v),y.replaceAll(v);else if("swap"===t){n.log("Swapping: ",g,h);var _=document.querySelector(g),E=document.querySelector(h);u(_,E)}else if("injectscript"===t)n.log("Injecting script: ",v),y.append("<script>".concat(v,"<\/script>"));else if("move"===t){n.log("Moving ".concat(g," to ").concat(h));var L=document.querySelector(g),N=document.querySelector(h);L.remove(),N.prepend(L)}else"noop"===t?n.log("Noop Operator: No operation is applied on target "):n.log("No such operator exists yet",t)}else n.log("Media condition mismatch: ",f)},a=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},i=function e(){sessionStorage.setItem(r,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",a,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",a,!0)}),15e3)},c=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",a,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var i=document.createElement("template");i.innerHTML=e.trim();var c=i.content.firstChild;c.appendChild(r),n.appendChild(c),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},u=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},function e(t){if(window.jQuery){var r,a=F(t);try{for(a.s();!(r=a.n()).done;){var i=r.value;try{o(i)}catch(e){n.log("Couldn't apply treatment ".concat(i.id," with error ").concat(e.message));continue}}}catch(e){a.e(e)}finally{a.f()}}else setTimeout((function(){e(t)}),10)}(t);case 11:case"end":return e.stop()}}),e)}))),B.apply(this,arguments)}var J=function(e){return B.apply(this,arguments)};function G(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return z(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?z(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function z(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var H=function(){function e(){k(this,e),this.logger=new C("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentIds=null,this.eligibleNotAppliedTreatments=null,this.latestChanges=null,this.eligibleNotAppliedChanges=null,this.sessionId=sessionStorage.getItem(g),this.viewId=crypto.randomUUID(),this.headers={type:"application/json"},this.logger.log("Initializing with session id: "+this.sessionId),this.debugMode=window.localStorage.getItem(b)?"on":"off",this.initializeExitEventListener()}var t;return x(e,[{key:"updateTreatments",value:function(e,t){this.appliedTreatmentIds=e,this.eligibleNotAppliedTreatments=t}},{key:"sendLogs",value:(t=i(l().mark((function e(t){var n,r,o,a,i=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return n=i.length>1&&void 0!==i[1]?i[1]:null,r=i.length>2&&void 0!==i[2]&&i[2],this.logger.log("Sending logs"),o=!1,e.next=6,this.getPromiseFromEvent(t,n,r);case 6:for(a=e.sent,this.logger.log("Request blob to send: ",a),setTimeout((function(){o=!0}),1e3);!o;)a&&(o=navigator.sendBeacon(f,a));case 10:case"end":return e.stop()}}),e,this)}))),function(e){return t.apply(this,arguments)})},{key:"getPromiseFromEvent",value:function(e,t,n){var r=this;return new Promise((function(o){"complete"!==document.readyState?(r.logger.log("Nextday Monitor: waiting for window to load"),window.onload=function(){o(r.packageLogData(e,t,n))}):o(r.packageLogData(e,t,n))}))}},{key:"updateLatestChanges",value:function(e,t){var n=this.appliedTreatmentIds,r=this.eligibleNotAppliedTreatments,o=this.logger;o.log("Updating latest changes");var a=this.latestChanges||n;U(a,e)||(o.log("Changes detected"),o.log("Changes: ",e),this.latestChanges=e),a=this.eligibleNotAppliedChanges||r,U(a,t)||(o.log("Changes detected"),o.log("Changes: ",e),this.eligibleNotAppliedChanges=t)}},{key:"packageLogData",value:function(e,t,n){var r=this.appliedTreatmentIds,o=this.eligibleNotAppliedTreatments,a=this.debugMode,i=this.headers,c=this.sessionId,l=this.viewId,u=t||(Object.keys(r).length?"Treatments applied":"No treatments applied"),s=new URL(window.location.href),d=this.prepareLogBody();return d.n="nextday-session_id-".concat(c),d.u=s.href,d.vId=n?null:l,d.sr=80,d.m=u,d.dbm=a,d.isOn=e,d.a=n?{}:r,d.e=n?{}:o,d.t=Date.now(),new Blob([JSON.stringify(d)],i)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.eligibleNotAppliedChanges,n=this.latestChanges,r=this.viewId;if(!n)return!1;var o={t:Date.now(),a:n,e:t,vId:r};return new Blob([JSON.stringify(o)],e)}},{key:"prepareLogBody",value:function(){var e,t={},n=G(window.dataLayer);try{for(n.s();!(e=n.n()).done;){var r=e.value;$.extend(t,r)}}catch(e){n.e(e)}finally{n.f()}var o=JSON.parse(T(document.cookie,"VL_CM_0")),a={};if(o&&o.Items){var i,c=G(o.Items);try{for(c.s();!(i=c.n()).done;){var l=i.value;a[l.K]=decodeURIComponent(l.V)}}catch(e){c.e(e)}finally{c.f()}}var u={};return u.cookieVLIsNew=a.OM_INW,u.cookieVLPVinVisit=a.VL_PVCountInVisit,u.cookieVLVisitDuration=a.VL_TotalDuration,u.cookieVLTotalPV=a.VL_TotalPV,u.cookieVLTotalVisit=a.VL_TotalVisit,u.gaPageType=t.PageType,u.gaProductName=t.content_name,u.gaViewType=t.content_type,u.gaProductCategory=t.content_category,u.gaProductID=t.content_ids,u.vvsProductCategory=t.vivense_category,u.gaListingName=function(){try{return t.ecommerce.detail.actionField.list}catch(e){return null}}(),u.vvsIsShowroom=t.isAdmin,u.vvsProductGroup=t.productGroup,u.vvsUserEmail=t.userEmail,u.vvsUserId=t.userId,u.vvsCategory=t.vivense_category,u.gaAction=t.Action,u.gaActionLabel=t.Label,u.gaCategoryProductCont=t.category_product_count,u.gaActionStep=function(){try{return t.ecommerce.checkout.actionField.step}catch(e){return null}}(),u.gaActionUser=function(){try{return t.ecommerce.checkout.actionField.dimension14}catch(e){return null}}()||function(){try{return t.ecommerce.purchase.actionField.dimension14}catch(e){return null}}(),u.gaCartProducts=function(){try{return t.ecommerce.checkout.products}catch(e){return null}}()||function(){try{return t.ecommerce.purchase.products}catch(e){return null}}(),u.vvsPDPProduct=function(){try{return t.vivenseProducts[0]}catch(e){return null}}(),u.gaPurchaseId=function(){try{return t.ecommerce.purchase.actionField.id}catch(e){return null}}(),u.gaPurchaseAffiliation=function(){try{return t.ecommerce.purchase.actionField.affiliation}catch(e){return null}}(),u.gaPurchaseCoupon=function(){try{return t.ecommerce.purchase.actionField.coupon}catch(e){return null}}(),u.gaPurchaseRevenue=function(){try{return t.ecommerce.purchase.actionField.revenue}catch(e){return null}}(),u.gaPurchaseShipping=function(){try{return t.ecommerce.purchase.actionField.shipping}catch(e){return null}}(),u.gaPurchaseTax=function(){try{return t.ecommerce.purchase.actionField.tax}catch(e){return null}}(),u.gaPurchasePayType=function(){try{return t.ecommerce.purchase.actionField.dimension15}catch(e){return null}}(),u.windowParams=window.location.search,u.windowScreen=window.screen,u.windowVPort=window.visualViewport,u.windowPRatio=window.devicePixelRatio,u.navAgent=navigator.userAgent,u.navHWCores=navigator.hardwareConcurrency,u.navLanguage=navigator.language,u.navTouch=navigator.maxTouchPoints,u.navPlatform=navigator.platform,u.navVendor=navigator.vendor,u.pClickSegment=window.localStorage.getItem("personaClick_segment"),u.cookieGaId=T(document.cookie,"_ga"),u.cookieLastBreadCrumb=T(document.cookie,"lastbreadcrumb"),u.cookieLastCategory=T(document.cookie,"lastcategory"),u.cookieFirstEntry=decodeURIComponent(T(document.cookie,"vivensefirst")),u.v="0.0.23",u.wdl=window.dataLayer,u}},{key:"initializeExitEventListener",value:function(){var e=this,t=this.logger;t.log("Initializing exit event listener"),window.addEventListener("pagehide",(function(){t.log("In pagehide event");var n=e.packageUpdateLogData();if(n){for(var r=!1;!r;)r=navigator.sendBeacon(f,n);t.log("Logs queued successfully")}else t.log("No changes to log")}),{capture:!0})}}]),e}(),K=H,Y=new C("Nextday Treatment Repository"),W=function(){function e(t){k(this,e);var n=t.cookiePct,r=t.treatments;this.treatments=r,this.cookiePct=n}var t;return x(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return Y.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw Y.log("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=i(l().mark((function e(){var t,n,r,o,a,i;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(Y.log("Loading treatments"),t=y,n=JSON.parse(localStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return Y.log("Treatments not found in local storage"),e.next=9,N();case 9:return r=e.sent,a={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return Y.log("Treatments are expired"),e.next=19,N();case 19:return r=e.sent,i={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 23:return Y.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),Q=W,X=new C("Nextday Counter Checker"),Z=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return X.log("No such type",t),null}}catch(t){return X.log("Could not get counter ".concat(e),t),null}};function ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var te=new C("Nextday DataLayer Checker"),ne=function(e){te.log("Searching dataLayer for key",e);var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ee(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(Object.keys(r).includes(e))return te.log("Found key ".concat(e," with value ").concat(r[e])),r[e]}}catch(e){n.e(e)}finally{n.f()}return te.log("Key ".concat(e," not found in dataLayer")),null},re=new C("Nextday Element Checker"),oe=new C("Nextday Function Checker"),ae=new C("Nextday Session Checker"),ie=new C("Nextday Url Checker"),ce=new C("Nextday Env Checker");function le(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ue(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var se=new C("Nextday Rule Engine"),de=function(){function e(t){k(this,e);var n=t.baseRuleSet,r=t.subVariantRuleSet,o=t.callback,a=void 0===o?null:o;this.baseRuleSet=n,this.subVariantRuleSet=r,this.callback=a}return x(e,[{key:"checkRules",value:function(){var e,t=le(this.baseRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(!this.checkRule(n))return!1}}catch(e){t.e(e)}finally{t.f()}return!0}},{key:"checkSubVariantRules",value:function(){var e,t=le(this.subVariantRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(this.checkRule(n))return n.subVariantId}}catch(e){t.e(e)}finally{t.f()}return!1}},{key:"checkRule",value:function(e){var t=e.chain,n=e.chain_condition,r=e.type,o=null;switch(r){case"session":o=function(e){ae.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;return"duration"===t?function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(sessionStorage.getItem(m)))}catch(e){return ae.log("Could not get session timestamp",e),Date.now()}}())/1e3;return q(n,e,parseInt(t))}(n,r):null}(e);break;case"counter":o=function(e){X.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return function(e,t){var n=parseInt(Z(h,"session"));return X.log("Page views counter value: ",n),null===n?(X.log("Pageviews counter not found in session storage"),!1):q(n,e,parseInt(t))}(n,r);case"CABasketPrice":return function(e,t){var n=parseInt(Z(w,"local"));return X.log("Coupon applicable basket price counter value: ",n),null===n?(X.log("Coupon applicable basket price counter not found in local storage"),!1):q(n,e,parseInt(t))}(n,r);default:return X.log("No such operator",t),!1}}(e);break;case"element":o=function(e){re.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,l=void 0===c?null:c,u=a;if(u&&!document.querySelector(u)&&(u=l||u),null===n)return q(document.querySelector(u),r,o);if(u&&!document.querySelector(u))return re.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return re.log("Selector not found on page"),!1;switch(u?t=document.querySelector(u):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var s;s=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(u).textContent.replace("TL","").replace(".",""));var d=parseInt(s);return q(d,r,o);case"classList":return q(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return q(f,r,o);default:return re.log("Operator not defined"),!1}}(e);break;case"dataLayer":o=function(e){te.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=ne(t);return q(o,n,r)}(e);break;case"url":o=function(e){ie.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return ie.log("Checking path ".concat(a," matches rule path ").concat(r)),q(a,n,r)}}(e);break;case"function":o=function(e){oe.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if(!t)return oe.log("Rule function not defined"),!1;var o=Function(t)();return q(o,n,r)}(e);break;case"environment":o=function(e){ce.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(p).matches?"mobile":"desktop";return q(o,n,r)}}(e);break;default:se.log("No such rule type: ".concat(r))}if(t)switch(n){case"and":o=o&&this.checkRule(t);break;case"or":o=o||this.checkRule(t);break;case"xor":o=o!=this.checkRule(t);break;default:se.log("No such chain condition")}return o}}]),e}();function fe(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return pe(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pe(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function pe(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}i(l().mark((function t(){var n,r,a,c;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=null,r=new K,t.prev=2,t.delegateYield(l().mark((function e(){var t,a,c,u,s,d,f,k,S,x,I,A,_,E,N,O,j,q,D,U,F,M,B;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new C).info("Nextday initiated"),window.localStorage.removeItem(y),(a=window.location.search).includes("nd_debug=1")?window.localStorage.setItem(b,1):a.includes("nd_debug=2")?window.localStorage.setItem(b,2):a.includes("nd_debug=0")&&window.localStorage.removeItem(b),c=T(document.cookie,"_ga"),t.log("Found cookie identifier: ",c),e.next=9,P(c);case 9:if(u=e.sent,window.localStorage.getItem(b)){e.next=19;break}if(!(u<80)){e.next=16;break}if(-1!==u){e.next=14;break}throw new Error("Could not parse cookie");case 14:throw n=!1,new Error("Control group: no treatments applied");case 16:n=!0,e.next=20;break;case 19:t.info("Debug mode on: all applicable treatments will be applied");case 20:if(document.documentElement.classList.contains("nextDay-hide")){e.next=22;break}throw new Error("Nextday script timed out");case 22:return R(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,$=h,G=v,z=g,H=m,K=sessionStorage.getItem($),Y=sessionStorage.getItem(G),W=sessionStorage.getItem(z),X=sessionStorage.getItem(H),K?sessionStorage.setItem($,parseInt(K)+1):sessionStorage.setItem($,1),null===Y&&sessionStorage.setItem(G,0),W||sessionStorage.setItem(z,crypto.randomUUID()),X||sessionStorage.setItem(H,Date.now()),setTimeout((function(){L()}),2e3),s=Q.getTreatments(),d=window.matchMedia(p).matches,f={subtree:!0,childList:!0,attributes:!0},k=function(){var e=i(l().mark((function e(n){var r,a,i,u,s,f,p,g,h,m,v,y,w,k,S,x;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.id,a=n.actions,i=n.baseRuleSet,u=n.device,s=n.dependant_on_treatment,f=n.reapply_event,p=n.subVariantRuleSet,"mobile"!==u||d){e.next=4;break}return t.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 4:if("desktop"!==u||!d){e.next=7;break}return t.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 7:if(!s){e.next=14;break}if(!Object.keys(O).includes(String(s))){e.next=12;break}return t.log("Treatment ".concat(r," skipped due to dependant treatment being skipped")),O[r]={dependant_on_treatment:s,subVariantId:null,actions:a},e.abrupt("return");case 12:e.next=22;break;case 14:return e.next=16,P(c+r,7);case 16:if(g=e.sent,window.localStorage.getItem(b)&&"1"===window.localStorage.getItem(b)&&(g=100),!(g<50)){e.next=22;break}return t.log("Treatment ".concat(r," skipped due to treatment split ratio")),O[r]={dependant_on_treatment:null,subVariantId:null,actions:a},e.abrupt("return");case 22:if(f){h=f,Array.isArray(f)||(h=[f]),t.log("Reapply event '".concat(f,"' found for treatment: ").concat(r)),m=fe(h);try{for(m.s();!(v=m.n()).done;)y=v.value,(w=j[y]?j[y]:[]).includes(r)?t.log("Treatment already added for reapply event"):j[y]=[].concat(o(w),[r])}catch(e){m.e(e)}finally{m.f()}}if(k=new de({baseRuleSet:i,subVariantRuleSet:p}),t.log("Starting base rule set check for treatment: "+r),i&&!k.checkRules()){e.next=37;break}if(p){e.next=30;break}return J(a),N[r]={subVariantId:null,actions:a},e.abrupt("return");case 30:return t.log("Starting sub variant rule set check for treatment: "+r),S=k.checkSubVariantRules(),x=a,S?(t.log("Applying sub variant with id: ",S),x=V(a,S)):t.log("Applying treatment with default values"),J(x),N[r]={subVariantId:S,actions:x},e.abrupt("return");case 37:t.log("Rule check failed for treatment: ",r);case 38:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),(S=function(){var e=w;if(window.location.href.includes("/siparis-listesi.html")){var n=Array.from(document.querySelectorAll(".price"));if(n.push.apply(n,o(Array.from(document.querySelectorAll(".new-price")))),!n.length)return t.log("Price elements not found"),void window.localStorage.setItem(e,0);t.log("Price elements: ",n);var r=n.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);t.log("Coupon applicable total price: ",r),r>=0&&window.localStorage.setItem(e,r)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)})(),window.location.href.includes("/siparis-listesi.html")&&(x=new MutationObserver((function(){t.log("Mutation observed, calling collectCABasketPrice"),S()})),(I=document.querySelector("#checkoutForm"))&&x.observe(I,f)),e.next=34,s;case 34:if(A=e.sent,t.log("Found treatments: ",A),t.log("Found cookie percentage: ",u),t.log("Split_ratio: ",80),t.log("cookiePct < SPLIT_RATIO",u<80),t.info("Control group ratio: ".concat(80,"%")),_=new Q({treatments:A,cookiePct:u}),(E=_.getMatchedTreatments()).length){e.next=47;break}return t.log("No treatments matched, returning without further action"),L(),r.sendLogs("No treatments matched",n,!0),e.abrupt("return",{v:void 0});case 47:N={},O={},j={},q=fe(E),e.prev=51,q.s();case 53:if((D=q.n()).done){e.next=65;break}return U=D.value,e.prev=55,e.next=58,k(U);case 58:e.next=63;break;case 60:e.prev=60,e.t0=e.catch(55),t.log("Error executing rules",e.t0);case 63:e.next=53;break;case 65:e.next=70;break;case 67:e.prev=67,e.t1=e.catch(51),q.e(e.t1);case 70:return e.prev=70,q.f(),e.finish(70);case 73:for(t.info("Treatments applied"),L(),t.log("Applied treatments: ",N),r.updateTreatments(N,O),r.sendLogs(n),setInterval((function(){r.updateLatestChanges(N,O)}),1e3),F=function(){var e=B[M],n=j[e],r=E.filter((function(e){return n.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,n=fe(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from infinite_scroll")),k(o)}}catch(e){n.e(e)}finally{n.f()}}));o.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,n=fe(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from timeout")),k(o)}}catch(e){n.e(e)}finally{n.f()}}),500);break;case"element_change":var a,i=fe(r);try{var c=function(){var e,n=a.value,r=fe(Array.isArray(n.reapply_selector)?n.reapply_selector:[n.reapply_selector]);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){t.log("Retrying treatment ".concat(n.id," from element_change")),k(n)})).observe(i,f)}}catch(e){r.e(e)}finally{r.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;case"on_scroll":window.onscroll=function(){var e,n=fe(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from on_scroll")),k(o)}}catch(e){n.e(e)}finally{n.f()}};break;default:t.log("Reapply event not found: ",e)}},M=0,B=Object.keys(j);M<B.length;M++)F();case 81:case"end":return e.stop()}var $,G,z,H,K,Y,W,X}),e,null,[[51,67,70,73],[55,60]])}))(),"t0",4);case 4:if("object"!==e(a=t.t0)){t.next=7;break}return t.abrupt("return",a.v);case 7:t.next=16;break;case 9:t.prev=9,t.t1=t.catch(2),L(),console.warn("Nextday: ",t.t1.message),c=t.t1.message,"Could not parse cookie"!==t.t1.message&&"Control group: no treatments applied"!==t.t1.message&&(c="Error when applying treatments: ".concat(t.t1.message)),r.sendLogs(c,n,!0);case 16:case"end":return t.stop()}}),t,null,[[2,9]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
