!function(){var e={757:function(e,t,n){e.exports=n(666)},666:function(e){var t=function(e){"use strict";var t,n=Object.prototype,r=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",i=o.asyncIterator||"@@asyncIterator",c=o.toStringTag||"@@toStringTag";function s(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{s({},"")}catch(e){s=function(e,t,n){return e[t]=n}}function l(e,t,n,r){var o=t&&t.prototype instanceof m?t:m,a=Object.create(o.prototype),i=new N(r||[]);return a._invoke=function(e,t,n){var r=d;return function(o,a){if(r===p)throw new Error("Generator is already running");if(r===g){if("throw"===o)throw a;return _()}for(n.method=o,n.arg=a;;){var i=n.delegate;if(i){var c=A(i,n);if(c){if(c===h)continue;return c}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===d)throw r=g,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=p;var s=u(e,t,n);if("normal"===s.type){if(r=n.done?g:f,s.arg===h)continue;return{value:s.arg,done:n.done}}"throw"===s.type&&(r=g,n.method="throw",n.arg=s.arg)}}}(e,n,i),a}function u(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=l;var d="suspendedStart",f="suspendedYield",p="executing",g="completed",h={};function m(){}function v(){}function y(){}var w={};s(w,a,(function(){return this}));var b=Object.getPrototypeOf,k=b&&b(b(L([])));k&&k!==n&&r.call(k,a)&&(w=k);var S=y.prototype=m.prototype=Object.create(w);function x(e){["next","throw","return"].forEach((function(t){s(e,t,(function(e){return this._invoke(t,e)}))}))}function I(e,t){function n(o,a,i,c){var s=u(e[o],e,a);if("throw"!==s.type){var l=s.arg,d=l.value;return d&&"object"==typeof d&&r.call(d,"__await")?t.resolve(d.__await).then((function(e){n("next",e,i,c)}),(function(e){n("throw",e,i,c)})):t.resolve(d).then((function(e){l.value=e,i(l)}),(function(e){return n("throw",e,i,c)}))}c(s.arg)}var o;this._invoke=function(e,r){function a(){return new t((function(t,o){n(e,r,t,o)}))}return o=o?o.then(a,a):a()}}function A(e,n){var r=e.iterator[n.method];if(r===t){if(n.delegate=null,"throw"===n.method){if(e.iterator.return&&(n.method="return",n.arg=t,A(e,n),"throw"===n.method))return h;n.method="throw",n.arg=new TypeError("The iterator does not provide a 'throw' method")}return h}var o=u(r,e.iterator,n.arg);if("throw"===o.type)return n.method="throw",n.arg=o.arg,n.delegate=null,h;var a=o.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,h):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,h)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function E(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function N(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function L(e){if(e){var n=e[a];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var o=-1,i=function n(){for(;++o<e.length;)if(r.call(e,o))return n.value=e[o],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:_}}function _(){return{value:t,done:!0}}return v.prototype=y,s(S,"constructor",y),s(y,"constructor",v),v.displayName=s(y,c,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===v||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,y):(e.__proto__=y,s(e,c,"GeneratorFunction")),e.prototype=Object.create(S),e},e.awrap=function(e){return{__await:e}},x(I.prototype),s(I.prototype,i,(function(){return this})),e.AsyncIterator=I,e.async=function(t,n,r,o,a){void 0===a&&(a=Promise);var i=new I(l(t,n,r,o),a);return e.isGeneratorFunction(n)?i:i.next().then((function(e){return e.done?e.value:i.next()}))},x(S),s(S,c,"Generator"),s(S,a,(function(){return this})),s(S,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=[];for(var n in e)t.push(n);return t.reverse(),function n(){for(;t.length;){var r=t.pop();if(r in e)return n.value=r,n.done=!1,n}return n.done=!0,n}},e.values=L,N.prototype={constructor:N,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(E),!e)for(var n in this)"t"===n.charAt(0)&&r.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function o(r,o){return c.type="throw",c.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var a=this.tryEntries.length-1;a>=0;--a){var i=this.tryEntries[a],c=i.completion;if("root"===i.tryLoc)return o("end");if(i.tryLoc<=this.prev){var s=r.call(i,"catchLoc"),l=r.call(i,"finallyLoc");if(s&&l){if(this.prev<i.catchLoc)return o(i.catchLoc,!0);if(this.prev<i.finallyLoc)return o(i.finallyLoc)}else if(s){if(this.prev<i.catchLoc)return o(i.catchLoc,!0)}else{if(!l)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return o(i.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var a=o;break}}a&&("break"===e||"continue"===e)&&a.tryLoc<=t&&t<=a.finallyLoc&&(a=null);var i=a?a.completion:{};return i.type=e,i.arg=t,a?(this.method="next",this.next=a.finallyLoc,h):this.complete(i)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),h},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),E(n),h}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;E(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:L(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),h}},e}(e.exports);try{regeneratorRuntime=t}catch(e){"object"==typeof globalThis?globalThis.regeneratorRuntime=t:Function("r","regeneratorRuntime = r")(t)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var a=t[r]={exports:{}};return e[r](a,a.exports,n),a.exports}n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,{a:t}),t},n.d=function(e,t){for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},function(){"use strict";function e(t){return e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},e(t)}function t(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function r(e,n){if(e){if("string"==typeof e)return t(e,n);var r=Object.prototype.toString.call(e).slice(8,-1);return"Object"===r&&e.constructor&&(r=e.constructor.name),"Map"===r||"Set"===r?Array.from(e):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(e,n):void 0}}function o(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,a=[],i=!0,c=!1;try{for(n=n.call(e);!(i=(r=n.next()).done)&&(a.push(r.value),!t||a.length!==t);i=!0);}catch(e){c=!0,o=e}finally{try{i||null==n.return||n.return()}finally{if(c)throw o}}return a}}(e,t)||r(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function a(e){return function(e){if(Array.isArray(e))return t(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||r(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function i(e,t,n,r,o,a,i){try{var c=e[a](i),s=c.value}catch(e){return void n(e)}c.done?t(s):Promise.resolve(s).then(r,o)}function c(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var a=e.apply(t,n);function c(e){i(a,r,o,c,s,"next",e)}function s(e){i(a,r,o,c,s,"throw",e)}c(void 0)}))}}var s=n(757),l=n.n(s),u="https://ndvivense.glov.ai/nd-styles.css?id=".concat((new Date).toISOString().substring(0,13).replace("T","").replaceAll("-","")),d="https://europe-west3-nextday-34eb3.cloudfunctions.net/api/logResponse",f="(max-width: 440px)",p=90,g="__nextday_session_id",h="ND_PageViews",m="ND_SessionTimestamp",v="ND_PopupDisplayFlag",y="ND_CABasketPrice",w="ND_Debug";function b(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(e,t,n){return t&&k(e.prototype,t),n&&k(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}var x=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"Nextday Client SDK";b(this,e),this.origin=t,this.DEBUG=window.localStorage.getItem(w)}return S(e,[{key:"info",value:function(){for(var e,t=this.origin,n=arguments.length,r=new Array(n),o=0;o<n;o++)r[o]=arguments[o];(e=console).info.apply(e,["[".concat(t,"]")].concat(r))}},{key:"log",value:function(){var e=this.DEBUG,t=this.origin;if(e){for(var n,r=arguments.length,o=new Array(r),a=0;a<r;a++)o[a]=arguments[a];(n=console).log.apply(n,["[".concat(t,"]")].concat(o))}}}]),e}(),I=x;function A(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var C=new I("Nextday DataLayer Checker"),E=function(e){C.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value,o=N(t);return B(o,n,r)},N=function(e){C.log("Searching dataLayer for key",e);var t,n=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return A(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?A(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}(window.dataLayer);try{for(n.s();!(t=n.n()).done;){var r=t.value;if(Object.keys(r).includes(e))return C.log("Found key ".concat(e," with value ").concat(r[e])),r[e]}}catch(e){n.e(e)}finally{n.f()}return C.log("Key ".concat(e," not found in dataLayer")),null},L=new I("Nextday Url Checker"),_=function(e){L.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("path"===t){var o=window.location.href,a=o.includes("ajax/mobile-search/loadOtherPages.php")?decodeURIComponent(new URL(o).search.replace("?originalPath=","")):new URL(o).pathname;return L.log("Checking path ".concat(a," matches rule path ").concat(r)),B(a,n,r)}};function O(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return T(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?T(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function T(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var j=new I("Nextday Utils");"randomUUID"in crypto||V();var R=function(){document.documentElement.classList.remove("nextDay-hide")},P=function(){var e=c(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return j.log("Fetching treatments"),e.next=3,fetch("https://ndtugs.pages.dev/treatments.json");case 3:return t=e.sent,e.next=6,t.json();case 6:return e.abrupt("return",e.sent);case 7:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),q=function(e,t){if(!e)return null;var n=e.split(";").map((function(e){return e.split("=")})).reduce((function(e,t){return t[0]&&t[1]&&(e[decodeURIComponent(t[0].trim())]=decodeURIComponent(t[1].trim())),e}),{})[t];return n?("_ga"===t&&(n=n.split(".")[2]),n):null},U=function(){var e=c(l().mark((function e(t){var n,r,o,a,i,c,s=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(n=s.length>1&&void 0!==s[1]?s[1]:8,t){e.next=3;break}return e.abrupt("return",-1);case 3:return r=(new TextEncoder).encode(t),e.next=6,crypto.subtle.digest("SHA-1",r);case 6:return o=e.sent,a=Array.from(new Uint8Array(o)),i=a.map((function(e){return e.toString(16).padStart(2,"0")})).join(""),c=parseInt(i.substring(0,n),16),e.abrupt("return",c%100);case 11:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),D=function(e){var t=document.documentElement.scrollTop,n=setInterval((function(){var r=document.documentElement.scrollTop;t-400>r?(clearInterval(n),e()):t=r}),500)},J=function(e,t){j.log("Applying style changes",t,"to elements",e);for(var n=0;n<e.length;n++)for(var r=e[n],a=0,i=Object.entries(t);a<i.length;a++){var c=o(i[a],2),s=c[0],l=c[1];r.style[s]=l}},M=function(){var e=c(l().mark((function e(){var t;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:(t=document.createElement("link")).rel="stylesheet",t.type="text/css",t.href=u,document.head.appendChild(t);case 5:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}(),F=function(e,t){var n,r=JSON.parse(JSON.stringify(e)),o=O(r);try{for(o.s();!(n=o.n()).done;){var a=n.value,i=a.subVariants;if(i){var c,s=O(i);try{for(s.s();!(c=s.n()).done;){var l=c.value;if(l.id===t){for(var u in l)"id"!==u&&(a[u]=l[u]);return r}}}catch(e){s.e(e)}finally{s.f()}}}}catch(e){o.e(e)}finally{o.f()}return r},B=function(e,t,n){if("notExist"===t)return e?(j.log("conditionChecker: -not satisfied- target does exist"),!1):(j.log("conditionChecker: -satisfied- target does not exist"),!0);if(null==e||null==t)return j.log("conditionChecker: runTimeValue or condition is not defined"),!1;switch(t){case"exist":return e?(j.log("conditionChecker: -satisfied- target does exist"),!0):(j.log("conditionChecker: -not satisfied- target does not exist"),!1);case"contains":return e.includes(n)?(j.log("conditionChecker: -satisfied- target contains value"),!0):(j.log("conditionChecker: -not satisfied- target does not contain value"),!1);case"notContains":return e.includes(n)?(j.log("conditionChecker: -not satisfied- target contains value"),!1):(j.log("conditionChecker: -satisfied- target does not contain value"),!0);case"equal":return e===n?(j.log("conditionChecker: -satisfied- target equals value"),!0):(j.log("conditionChecker: -not satisfied- target does not equal value"),!1);case"notEqual":return e!==n?(j.log("conditionChecker: -satisfied- target does not equal value"),!0):(j.log("conditionChecker: -not satisfied- target equals value"),!1);case"greaterThan":return e>n?(j.log("conditionChecker: -satisfied- target is greater than value"),!0):(j.log("conditionChecker: -not satisfied- target is not greater than value"),!1);case"lessThan":return e<n?(j.log("conditionChecker: -satisfied- target is less than value"),!0):(j.log("conditionChecker: -not satisfied- target is not less than value"),!1);case"greaterEquals":return e>=n?(j.log("conditionChecker: -satisfied- target is greater or equal than value"),!0):(j.log("conditionChecker: -not satisfied- target is not greater or equal than value"),!1);case"lessEquals":return e<=n?(j.log("conditionChecker: -satisfied- target is less or equal than value"),!0):(j.log("conditionChecker: -not satisfied- target is not less or equal than value"),!1);case"between":var r=o(n.split(","),2),a=r[0],i=r[1];return a=parseInt(a),i=parseInt(i),e>=a&&e<=i?(j.log("conditionChecker: -satisfied- target is between min and max"),!0):(j.log("conditionChecker: -not satisfied- target is not between min and max"),!1);default:return j.log("conditionChecker: condition is not defined ",t),!1}},V=function(){crypto.randomUUID=function(){return([1e7]+-1e3+-4e3+-8e3+-1e11).replace(/[018]/g,(function(e){return(e^crypto.getRandomValues(new Uint8Array(1))[0]&15>>e/4).toString(16)}))}},G=function t(n,r){if(n===r)return!0;if("object"!==e(n)||"object"!==e(r)||null==n||null==r)return!1;var o=Object.keys(n),a=Object.keys(r);if(o.length!==a.length)return!1;var i=!0;return o.forEach((function(e){a.includes(e)||(i=!1),"function"!=typeof n[e]&&"function"!=typeof r[e]||n[e].toString()!==r[e].toString()&&(i=!1),t(n[e],r[e])||(i=!1)})),i},z=function(){var e=[],t={operator:"PageType",condition:"equal",value:"Homepage"};if(E(t))return null;if(t.value="Listingpage",E(t))return Array.from(document.querySelectorAll(".product-card")).forEach((function(t){e.push(t.getAttribute("data-product-sku"))})),e.length?e:(j.log("Product SKUs not found on Listingpage"),null);if(t.value="Productpage",E(t)){var n=document.querySelector(".product-sku");return n?(e.push(n.getAttribute("data-sku")),e):(j.log("Product SKU not found on Productpage"),null)}return t.operator="path",t.value="/siparis-listesi.html",_(t)?(Array.from(document.querySelectorAll(".cart-inside")).forEach((function(t){e.push(t.getAttribute("data-sku"))})),e.length?e:(j.log("Product SKUs not found on basket page"),null)):(j.log("Unidentified page type"),null)},K='<div class="top-left-badge"><div class="super-price-badge"><img src="//cdn.vivense.com/images/badges/superfiyat_badge_final.svg" width="45" class="super-price-icon"></div></div>';function H(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return Y(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Y(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function Y(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function W(){return W=c(l().mark((function e(t,n){var r,o,a,i,c,s,u,d=arguments;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:d.length>2&&void 0!==d[2]&&d[2],r=new I("Nextday Apply Treatments"),o=v,a=function(e){r.log("Applying treatment: ",JSON.stringify(e));var t=e.badgeSelector,a=e.operator,i=e.type,l=e.applyEvent,d=e.contentSelector,p=e.selector,g=e.selectorFallback,h=e.mdCondition,m=e.move_selector_1,v=e.move_selector_2,y=e.replaceFn,w=e.value,b=$(p);if(!h||window.matchMedia(h).matches)if(m&&!v||v&&!m)r.log("Both move selectors are required");else{if(m&&v){if(!$(m).length)return void r.log("Move selector 1 not found: ",m);if(!$(v).length)return void r.log("Move selector 2 not found: ",v)}else{if(!p)return void r.log("Selector not specified");if(!b.length&&(r.log("Selector not found: ",p),r.log("Trying fallback selector: ",g),g&&(b=$(g)),!b.length))return void r.log("Fallback selector not found")}if(y&&w.includes("{{REPLACE}}")){r.log("Executing replace function: ",y);var k=Function(y);w=w.replace("{{REPLACE}}",k())}if("remove"===a)b&&(r.log("Removing: ",p),b.remove()),r.log("Cannot found element with selector: ",p);else if("insert"===a)switch(i){case"before":r.log("Inserting before: ",w),String(w).includes("nd-add-to-win")&&$(".nd-add-to-win").remove(),b.before(w);break;case"after":r.log("Inserting after: ",w),b.after(w);break;case"popup":if(0!==parseInt(sessionStorage.getItem(o))){r.log("Popup already displayed in session");break}if(r.log("Creating Popup: ",w),s(w,d),l){var S,x=window.matchMedia(f).matches,I=H(l);try{for(I.s();!(S=I.n()).done;)switch(S.value){case"exitIntent":r.log("Adding exit intent listener"),x?D(c):document.documentElement.addEventListener("mouseleave",c,{once:!0});break;case"copyIntent":r.log("Adding copy intent listener"),document.documentElement.addEventListener("copy",c,{once:!0})}}catch(e){I.e(e)}finally{I.f()}}else setTimeout((function(){c()}),timeout)}else if("edit"===a)switch(i){case"text":r.log("Editing text: ",w),b.text(w);break;case"styleApplicator":r.log("Applying style: ",w);var A=document.querySelectorAll(p),C=JSON.parse(w);r.log("Style Changes Map: ",C),J(A,C);break;case"addClass":r.log("addding class to ".concat(b," named ").concat(w)),b.addClass(w);break;case"removeClass":r.log("remove class from ".concat(b," named ").concat(w)),b.removeClass(w);break;case"updateBadge":if(!n){r.log("Product info unavailable");break}r.log("Updating badges: ",w);for(var E=0,N=Array.from(b);E<N.length;E++){var L=N[E],_=$(L),O=_.attr("data-product-sku");O||(O=_.attr("data-sku")),O?(_.find(t).remove(),Object.keys(n).includes(O)&&n[O].badges.includes(w)&&"superPrice"===w&&_.find(".hover-element-area").before(K)):r.log("Could not find product sku")}break;default:r.log("Unknown edit type: ",i)}else if("setattribute"===a)switch(r.log("Setting attribute: ",attribute,w),attribute){case"src":b.css("content","url(".concat(w.trim(),")"));break;case"style":var T=w.split(":")[0].trim(),j=w.split(":")[1].trim();b.css(T,j,"!important")}else if("replace"===a)r.log("Replacing: ",w),b.replaceAll(w);else if("swap"===a){r.log("Swapping: ",m,v);var R=document.querySelector(m),P=document.querySelector(v);u(R,P)}else if("injectscript"===a)r.log("Injecting script: ",w),b.append("<script>".concat(w,"<\/script>"));else if("move"===a){r.log("Moving ".concat(m," to ").concat(v));var q=document.querySelector(m),U=document.querySelector(v);q.remove(),U.prepend(q)}else"noop"===a?r.log("Noop Operator: No operation is applied on target "):r.log("No such operator exists yet",a)}else r.log("Media condition mismatch: ",h)},i=function e(t){var n=t.target.id;n&&"nd-popup__wrapper"===n&&($("#nd-popup__wrapper").remove(),window.removeEventListener("click",e,!0))},c=function e(){sessionStorage.setItem(o,1);var t=document.querySelector("#grt-shadow-host");t&&(t.style.display="none"),document.getElementById("nd-popup__wrapper").style.display="block",window.addEventListener("click",i,!0),document.documentElement.removeEventListener("mouseleave",e,{once:!0}),document.documentElement.removeEventListener("copy",e,{once:!0}),setTimeout((function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",i,!0)}),15e3)},s=function(e,t){var n=document.createElement("div");n.classList.add("nd-popup__wrapper"),n.id="nd-popup__wrapper";var r=document.createElement("button");if(r.classList.add("nd-popup__button-close"),r.innerText="X",r.onclick=function(){$("#nd-popup__wrapper").remove(),window.removeEventListener("click",i,!0)},t)for(var o=Array.from(document.querySelectorAll(t));e.includes("{{REPLACE}}")&&o.length>0;)e=e.replace("{{REPLACE}}",o.shift().src);var a=document.createElement("template");a.innerHTML=e.trim();var c=a.content.firstChild;c.appendChild(r),n.appendChild(c),$("#nd-popup__wrapper").remove(),document.body.appendChild(n)},u=function(e,t){var n,r,o=e.parentNode,a=t.parentNode;if(o&&a&&!o.isEqualNode(t)&&!a.isEqualNode(e)){for(var i=0;i<o.children.length;i++)o.children[i].isEqualNode(e)&&(n=i);for(var c=0;c<a.children.length;c++)a.children[c].isEqualNode(t)&&(r=c);o.isEqualNode(a)&&n<r&&r++,o.insertBefore(t,o.children[n]),a.insertBefore(e,a.children[r])}},function e(t){if(window.jQuery){var n,o=H(t);try{for(o.s();!(n=o.n()).done;){var i=n.value;try{a(i)}catch(e){r.log("Couldn't apply treatment ".concat(i.id," with error ").concat(e.message));continue}}}catch(e){o.e(e)}finally{o.f()}}else setTimeout((function(){e(t)}),10)}(t);case 11:case"end":return e.stop()}}),e)}))),W.apply(this,arguments)}var Q=function(e,t){return W.apply(this,arguments)},X=function(){function e(t,n){b(this,e),this.logger=new I("Nextday Monitor"),this.logger.log("Initializing monitor"),this.appliedTreatmentIds=JSON.parse(JSON.stringify(t)),this.eligibleNotAppliedTreatments=JSON.parse(JSON.stringify(n)),this.latestChanges=null,this.eligibleNotAppliedChanges=null,this.sessionId=sessionStorage.getItem(g),this.viewId=crypto.randomUUID(),this.headers={type:"application/json"},this.logger.log("Initializing with session id: "+this.sessionId),this.initializeExitEventListener(),this.debugMode=window.localStorage.getItem(w)?"on":"off"}var t,n;return S(e,[{key:"sendLogs",value:(n=c(l().mark((function e(t){var n;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(this.logger.log("Sending logs"),n=!1,setTimeout((function(){n=!0}),1e3);!n;)n=navigator.sendBeacon(d,this.packageLogData(t));case 4:case"end":return e.stop()}}),e,this)}))),function(e){return n.apply(this,arguments)})},{key:"updateLatestChanges",value:function(e,t){var n=this.appliedTreatmentIds,r=this.eligibleNotAppliedTreatments,o=this.logger;o.log("Updating latest changes");var a=this.latestChanges||n;G(a,e)||(o.log("Changes detected"),o.log("Changes: ",e),this.latestChanges=e),a=this.eligibleNotAppliedChanges||r,G(a,t)||(o.log("Changes detected"),o.log("Changes: ",e),this.eligibleNotAppliedChanges=t)}},{key:"packageLogData",value:function(e){var t=this.appliedTreatmentIds,n=this.eligibleNotAppliedTreatments,r=this.debugMode,o=this.headers,a=this.sessionId,i=this.viewId,c=Object.keys(t).length?"Treatments applied":"No treatments applied",s=new URL(window.location.href),l={n:"nextday-session_id-".concat(a),u:s.href,d:s.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer?JSON.parse(JSON.stringify(window.dataLayer)):[],t:Date.now(),v:"0.0.22",a:t,e:n,vId:i,sr:p,m:c,dbm:r,isOn:e};return new Blob([JSON.stringify(l)],o)}},{key:"packageUpdateLogData",value:function(){var e=this.headers,t=this.eligibleNotAppliedChanges,n=this.latestChanges,r=this.viewId;if(!n)return!1;var o={t:Date.now(),a:n,e:t,vId:r};return new Blob([JSON.stringify(o)],e)}},{key:"initializeExitEventListener",value:function(){var e=this,t=this.logger;t.log("Initializing exit event listener"),window.addEventListener("pagehide",(function(){t.log("In pagehide event");var n=e.packageUpdateLogData();if(n){for(var r=!1;!r;)r=navigator.sendBeacon(d,n);t.log("Logs queued successfully")}else t.log("No changes to log")}),{capture:!0})}}],[{key:"sendEmptyLog",value:(t=c(l().mark((function e(t,n){var r;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:for(console.log("Nextday Monitor: Sending empty logs"),r=!1,setTimeout((function(){r=!0}),1e3);!r;)r=navigator.sendBeacon(d,this.packageEmptyLogData(t,n));case 4:case"end":return e.stop()}}),e,this)}))),function(e,n){return t.apply(this,arguments)})},{key:"packageEmptyLogData",value:function(e,t){var n=new URL(window.location.href),r=window.localStorage.getItem(w)?"on":"off",o=sessionStorage.getItem(g),a={n:"nextday-session_id-".concat(o),u:n.href,d:n.hostname,r:document.referrer,w:window.innerWidth,c:document.cookie,wdl:window.dataLayer?JSON.parse(JSON.stringify(window.dataLayer)):[],t:Date.now(),v:"0.0.22",a:{},e:{},vId:null,sr:p,m:e,dbm:r,isOn:t};return new Blob([JSON.stringify(a)],{type:"application/json"})}}]),e}(),Z=X,ee=new I("Nextday Treatment Repository"),te=function(){function e(t){b(this,e);var n=t.cookiePct,r=t.treatments;this.treatments=r,this.cookiePct=n}var t;return S(e,[{key:"getMatchedTreatments",value:function(){var e=this.getUserSegment(),t=this.treatments.filter((function(t){return t.apply_on_user_segment==e||"*"===t.apply_on_user_segment}));return ee.log("".concat(t.length," treatments segment matched")),t.length?t:[]}},{key:"getUserSegment",value:function(){if(-1===this.cookiePct)throw ee.info("New user has no segment"),new Error("New User");return this.cookiePct<50?"A":"B"}}],[{key:"getTreatments",value:(t=c(l().mark((function e(){var t,n,r,o,a,i;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(ee.log("Loading treatments"),t="ND_Treatments",n=JSON.parse(localStorage.getItem(t)),r=null==n?void 0:n.treatments,o=null==n?void 0:n.timestamp,r&&o){e.next=13;break}return ee.log("Treatments not found in local storage"),e.next=9,P();case 9:return r=e.sent,a={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(a)),e.abrupt("return",r);case 13:if(!o){e.next=23;break}if(!((Date.now()-o)/864e5>1)){e.next=23;break}return ee.log("Treatments are expired"),e.next=19,P();case 19:return r=e.sent,i={timestamp:Date.now(),treatments:r},localStorage.setItem(t,JSON.stringify(i)),e.abrupt("return",r);case 23:return ee.log("Treatments are loaded from local storage"),e.abrupt("return",r);case 25:case"end":return e.stop()}}),e)}))),function(){return t.apply(this,arguments)})}]),e}(),ne=te,re=new I("Nextday Counter Checker"),oe=function(e,t){try{switch(t){case"session":return sessionStorage.getItem(e);case"local":return localStorage.getItem(e);default:return re.log("No such type",t),null}}catch(t){return re.log("Could not get counter ".concat(e),t),null}},ae=new I("Nextday Element Checker"),ie=new I("Nextday Function Checker"),ce=new I("Nextday Session Checker"),se=new I("Nextday Env Checker");function le(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return ue(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ue(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function ue(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var de=new I("Nextday Rule Engine"),fe=function(){function e(t){b(this,e);var n=t.baseRuleSet,r=t.subVariantRuleSet,o=t.callback,a=void 0===o?null:o;this.baseRuleSet=n,this.subVariantRuleSet=r,this.callback=a}return S(e,[{key:"checkRules",value:function(){var e,t=le(this.baseRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(!this.checkRule(n))return!1}}catch(e){t.e(e)}finally{t.f()}return!0}},{key:"checkSubVariantRules",value:function(){var e,t=le(this.subVariantRuleSet);try{for(t.s();!(e=t.n()).done;){var n=e.value;if(this.checkRule(n))return n.subVariantId}}catch(e){t.e(e)}finally{t.f()}return!1}},{key:"checkRule",value:function(e){var t=e.chain,n=e.chain_condition,r=e.type,o=null;switch(r){case"session":o=function(e){ce.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;return"duration"===t?function(e,t){var n=(Date.now()-function(){try{return new Date(parseInt(sessionStorage.getItem(m)))}catch(e){return ce.log("Could not get session timestamp",e),Date.now()}}())/1e3;return B(n,e,parseInt(t))}(n,r):null}(e);break;case"counter":o=function(e){re.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;switch(t){case"pageView":return function(e,t){var n=parseInt(oe(h,"session"));return re.log("Page views counter value: ",n),null===n?(re.log("Pageviews counter not found in session storage"),!1):B(n,e,parseInt(t))}(n,r);case"CABasketPrice":return function(e,t){var n=parseInt(oe(y,"local"));return re.log("Coupon applicable basket price counter value: ",n),null===n?(re.log("Coupon applicable basket price counter not found in local storage"),!1):B(n,e,parseInt(t))}(n,r);default:return re.log("No such operator",t),!1}}(e);break;case"element":o=function(e){ae.log("Checking rule",JSON.stringify(e));var t,n=e.operator,r=e.condition,o=e.value,a=e.selector,i=e.selectorAll,c=e.selectorFallback,s=void 0===c?null:c,l=a;if(l&&!document.querySelector(l)&&(l=s||l),null===n)return B(document.querySelector(l),r,o);if(l&&!document.querySelector(l))return ae.log("Selector not found on page"),!1;if(i&&!document.querySelectorAll(i))return ae.log("Selector not found on page"),!1;switch(l?t=document.querySelector(l):i&&(t=Array.from(document.querySelectorAll(i))),n){case"text-number":var u;u=Array.isArray(t)?t.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0):parseInt(document.querySelector(l).textContent.replace("TL","").replace(".",""));var d=parseInt(u);return B(d,r,o);case"classList":return B(Array.from(t.classList),r,o);case"count":var f=Array.isArray(t)?t.length:t?1:0;return B(f,r,o);default:return ae.log("Operator not defined"),!1}}(e);break;case"dataLayer":o=E(e);break;case"url":o=_(e);break;case"function":o=function(e){ie.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if(!t)return ie.log("Rule function not defined"),!1;var o=Function(t)();return B(o,n,r)}(e);break;case"environment":o=function(e){se.log("Checking rule",JSON.stringify(e));var t=e.operator,n=e.condition,r=e.value;if("device_type"===t){var o=window.matchMedia(f).matches?"mobile":"desktop";return B(o,n,r)}}(e);break;default:de.log("No such rule type: ".concat(r))}if(t)switch(n){case"and":o=o&&this.checkRule(t);break;case"or":o=o||this.checkRule(t);break;case"xor":o=o!=this.checkRule(t);break;default:de.log("No such chain condition")}return o}}]),e}(),pe=new I("Nextday Api"),ge=function(){var e=c(l().mark((function e(){var t,n,r;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(pe.log("Starting product info lookup"),t=z()){e.next=5;break}return pe.log("No sku found"),e.abrupt("return",null);case 5:return(n=new Headers).append("Content-Type","application/json"),e.next=9,fetch("https://catalog-api-ijp1hi4.nw.gateway.dev/catalog",{method:"POST",body:JSON.stringify(t),headers:n});case 9:if((r=e.sent).ok){e.next=13;break}return pe.log("Product info lookup failed"),e.abrupt("return",null);case 13:return e.next=15,r.json();case 15:if(r=e.sent){e.next=19;break}return pe.log("Product info extraction from response failed"),e.abrupt("return",null);case 19:return pe.log("Product info lookup successful"),e.abrupt("return",r);case 21:case"end":return e.stop()}}),e)})));return function(){return e.apply(this,arguments)}}();function he(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return me(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?me(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var a,i=!0,c=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return i=e.done,e},e:function(e){c=!0,a=e},f:function(){try{i||null==n.return||n.return()}finally{if(c)throw a}}}}function me(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}c(l().mark((function t(){var n,r,i;return l().wrap((function(t){for(;;)switch(t.prev=t.next){case 0:return n=null,t.prev=1,t.delegateYield(l().mark((function e(){var t,r,i,s,u,d,b,k,S,x,A,C,E,N,L,_,O,T,j,P,D,J,B,V,$,G,z,K;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return(t=new I).info("Nextday initiated"),r=ge(),(i=window.location.search).includes("nd_debug=1")?window.localStorage.setItem(w,1):i.includes("nd_debug=2")?window.localStorage.setItem(w,2):i.includes("nd_debug=0")&&window.localStorage.removeItem(w),s=q(document.cookie,"_ga"),t.log("Found cookie identifier: ",s),e.next=9,U(s);case 9:if(u=e.sent,window.localStorage.getItem(w)){e.next=19;break}if(!(u<p)){e.next=16;break}if(-1!==u){e.next=14;break}throw new Error("Could not parse cookie");case 14:throw n=!1,new Error("Control group: no treatments applied");case 16:n=!0,e.next=20;break;case 19:t.info("Debug mode on: all applicable treatments will be applied");case 20:if(document.documentElement.classList.contains("nextDay-hide")){e.next=22;break}throw new Error("Nextday script timed out");case 22:return M(),void 0,void 0,void 0,void 0,void 0,void 0,void 0,void 0,H=h,Y=v,W=g,X=m,ee=sessionStorage.getItem(H),te=sessionStorage.getItem(Y),re=sessionStorage.getItem(W),oe=sessionStorage.getItem(X),ee?sessionStorage.setItem(H,parseInt(ee)+1):sessionStorage.setItem(H,1),null===te&&sessionStorage.setItem(Y,0),re||sessionStorage.setItem(W,crypto.randomUUID()),oe||sessionStorage.setItem(X,Date.now()),setTimeout((function(){R()}),2e3),d=ne.getTreatments(),b=window.matchMedia(f).matches,k={subtree:!0,childList:!0},S=function(){var e=c(l().mark((function e(n){var r,o,i,c,u,d,f,p,g,h,m,v,y,k,S,x;return l().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:if(r=n.id,o=n.actions,i=n.baseRuleSet,c=n.device,u=n.dependant_on_treatment,d=n.reapply_event,f=n.subVariantRuleSet,"mobile"!==c||b){e.next=4;break}return t.log("Treatment device 'mobile' mismatch"),e.abrupt("return");case 4:if("desktop"!==c||!b){e.next=7;break}return t.log("Treatment device 'desktop' mismatch"),e.abrupt("return");case 7:if(!u){e.next=14;break}if(!Object.keys(P).includes(String(u))){e.next=12;break}return t.log("Treatment ".concat(r," skipped due to dependant treatment being skipped")),P[r]={dependant_on_treatment:u,subVariantId:null,actions:o},e.abrupt("return");case 12:e.next=22;break;case 14:return e.next=16,U(s+r,7);case 16:if(p=e.sent,window.localStorage.getItem(w)&&"1"===window.localStorage.getItem(w)&&(p=100),!(p<10)){e.next=22;break}return t.log("Treatment ".concat(r," skipped due to treatment split ratio")),P[r]={dependant_on_treatment:null,subVariantId:null,actions:o},e.abrupt("return");case 22:if(d){g=d,Array.isArray(d)||(g=[d]),t.log("Reapply event '".concat(d,"' found for treatment: ").concat(r)),h=he(g);try{for(h.s();!(m=h.n()).done;)v=m.value,(y=D[v]?D[v]:[]).includes(r)?t.log("Treatment already added for reapply event"):D[v]=[].concat(a(y),[r])}catch(e){h.e(e)}finally{h.f()}}if(k=new fe({baseRuleSet:i,subVariantRuleSet:f}),t.log("Starting base rule set check for treatment: "+r),i&&!k.checkRules()){e.next=37;break}if(f){e.next=30;break}return Q(o,_),j[r]={subVariantId:null,actions:o},e.abrupt("return");case 30:return t.log("Starting sub variant rule set check for treatment: "+r),S=k.checkSubVariantRules(),x=o,S?(t.log("Applying sub variant with id: ",S),x=F(o,S)):t.log("Applying treatment with default values"),Q(x,_),j[r]={subVariantId:S,actions:x},e.abrupt("return");case 37:t.log("Rule check failed for treatment: ",r);case 38:case"end":return e.stop()}}),e)})));return function(t){return e.apply(this,arguments)}}(),(x=function(){var e=y;if(window.location.href.includes("/siparis-listesi.html")){var n=Array.from(document.querySelectorAll(".price"));if(n.push.apply(n,a(Array.from(document.querySelectorAll(".new-price")))),!n.length)return t.log("Price elements not found"),void window.localStorage.setItem(e,0);t.log("Price elements: ",n);var r=n.reduce((function(e,t){return e+parseInt(t.textContent.replace("TL","").replace(".",""))}),0);t.log("Coupon applicable total price: ",r),r>=0&&window.localStorage.setItem(e,r)}else(window.location.href.includes("/siparis-ozeti.html")||null===window.localStorage.getItem(e))&&window.localStorage.setItem(e,0)})(),window.location.href.includes("/siparis-listesi.html")&&(A=new MutationObserver((function(){t.log("Mutation observed, calling collectCABasketPrice"),x()})),(C=document.querySelector("#checkoutForm"))&&A.observe(C,k)),e.next=34,Promise.all([d,r]);case 34:if(E=e.sent,N=o(E,2),L=N[0],_=N[1],t.log("Found treatments: ",L),t.log("Found cookie percentage: ",u),t.log("Split_ratio: ",p),t.log("cookiePct < SPLIT_RATIO",u<p),t.info("Control group ratio: ".concat(p,"%")),O=new ne({treatments:L,cookiePct:u}),(T=O.getMatchedTreatments()).length){e.next=50;break}return t.log("No treatments matched, returning without further action"),R(),Z.sendEmptyLog("No treatments matched",n),e.abrupt("return",{v:void 0});case 50:j={},P={},D={},J=he(T),e.prev=54,J.s();case 56:if((B=J.n()).done){e.next=68;break}return V=B.value,e.prev=58,e.next=61,S(V);case 61:e.next=66;break;case 63:e.prev=63,e.t0=e.catch(58),t.log("Error executing rules",e.t0);case 66:e.next=56;break;case 68:e.next=73;break;case 70:e.prev=70,e.t1=e.catch(54),J.e(e.t1);case 73:return e.prev=73,J.f(),e.finish(73);case 76:for(t.info("Treatments applied"),R(),t.log("Applied treatments: ",j),($=new Z(j,P)).sendLogs(n),setInterval((function(){$.updateLatestChanges(j,P)}),1e3),G=function(){var e=K[z],n=D[e],r=T.filter((function(e){return n.includes(e.id)}));switch(e){case"infinite_scroll":var o=new ResizeObserver((function(){var e,n=he(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from infinite_scroll")),S(o)}}catch(e){n.e(e)}finally{n.f()}}));o.observe(document.documentElement);break;case"timeout":setTimeout((function(){var e,n=he(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from timeout")),S(o)}}catch(e){n.e(e)}finally{n.f()}}),500);break;case"element_change":var a,i=he(r);try{var c=function(){var e,n=a.value,r=he(Array.isArray(n.reapply_selector)?n.reapply_selector:[n.reapply_selector]);try{for(r.s();!(e=r.n()).done;){var o=e.value,i=document.querySelector(o);i&&new MutationObserver((function(){t.log("Retrying treatment ".concat(n.id," from element_change")),S(n)})).observe(i,k)}}catch(e){r.e(e)}finally{r.f()}};for(i.s();!(a=i.n()).done;)c()}catch(e){i.e(e)}finally{i.f()}break;case"on_scroll":window.onscroll=function(){var e,n=he(r);try{for(n.s();!(e=n.n()).done;){var o=e.value;t.log("Retrying treatment ".concat(o.id," from on_scroll")),S(o)}}catch(e){n.e(e)}finally{n.f()}};break;default:t.log("Reapply event not found: ",e)}},z=0,K=Object.keys(D);z<K.length;z++)G();case 84:case"end":return e.stop()}var H,Y,W,X,ee,te,re,oe}),e,null,[[54,70,73,76],[58,63]])}))(),"t0",3);case 3:if("object"!==e(r=t.t0)){t.next=6;break}return t.abrupt("return",r.v);case 6:t.next=15;break;case 8:t.prev=8,t.t1=t.catch(1),R(),console.warn("Nextday: ",t.t1.message),i=t.t1.message,"Could not parse cookie"!==t.t1.message&&"Control group: no treatments applied"!==t.t1.message&&(i="Error when applying treatments: ".concat(t.t1.message)),Z.sendEmptyLog(i,n);case 15:case"end":return t.stop()}}),t,null,[[1,8]])})))()}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
